// Generated by CoffeeScript 1.7.1
(function() {
  var templateEngine,
    __hasProp = {}.hasOwnProperty;

  templateEngine = new ko.nativeTemplateEngine();

  templateEngine.addTemplate = function(templateName, templateMarkup) {
    return document.write("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "</script>");
  };

  templateEngine.addTemplate("ko_datagrid_search", "<span style=\"display:none\" data-bind=\"visible:$root.searchable\" class=\"ko-datagrid-search\"><input data-bind=\"value:searchInput, valueUpdate:'keyup'\" placeholder='search' /></span>");

  templateEngine.addTemplate("ko_datagrid_lengthMenu", "<span style=\"display:none\" data-bind=\"visible:$root.lengthMenu\" class=\"ko-datagrid-lengthMenu\"><select data-bind=\"options: [5, 10, 20, 30, 40, 50, 100], value: $root.pageLength\"></select></span>");

  templateEngine.addTemplate("ko_datagrid_grid", "<form class=\"ko-datagrid-form\"><table border=\"1\" class=\"ko-datagrid\" cellspacing=\"0\"> <thead> <tr data-bind=\"foreach: columns\"> <!-- ko if: $root.selectable && $index() == 0 --> <td></td> <!-- /ko --> <th data-bind=\"click:function(){$root.sortColumn(rowText)}, style: {cursor: $root.sortable ? 'pointer' : 'auto'}, text: headerText\"></th> </tr> </thead> <tbody data-bind=\"foreach: itemsOnCurrentPage\"> <tr data-bind=\"foreach: $parent.columns\"> <!-- ko if: $root.selectable && $index() == 0 --> <td><input data-bind=\"attr: {type: $root.selectStyle, name: rowText + $index()}\"/></td> <!-- /ko --> <td data-bind=\"text: typeof rowText == 'function' ? rowText($parent) : $parent[rowText] \"></td> </tr> </tbody> <tfoot> <tr> <td style=\"display:none\" data-bind=\"visible: itemsOnCurrentPage().length == 0, attr: {colspan: $root.selectable ? columns.length + 1 : columns.length}\">No results found</td> </tr> </tfoot> </table></form>");

  templateEngine.addTemplate("ko_datagrid_pageLinks", "<span style=\"display:none\" data-bind=\"visible:$root.paging && $root.maxPageIndex() !== -1\" class=\"ko-datagrid-pageLinks\"> <!-- ko foreach: ko.utils.range(0, maxPageIndex) --> <a href=\"#\" data-bind=\"text: $data + 1, click: function() { $root.currentPageIndex($data) }, style: {color: ($data == $root.currentPageIndex()) ? 'black' : 'blue'}, css: { 'ko-datagrid-selected-page': $data == $root.currentPageIndex() }\"> </a> <!-- /ko --> </span>");

  ko.bindingHandlers.datagrid = {
    init: function() {
      return {
        'controlsDescendantBindings': true
      };
    },
    update: function(element, viewModelAccessor, allBindings) {
      var gridContainer, lengthMenuContainer, pageLinksContainer, searchContainer, viewModel;
      viewModel = viewModelAccessor();
      while (element.firstChild) {
        ko.removeNode(element.firstChild);
      }
      searchContainer = element.appendChild(document.createElement("DIV"));
      ko.renderTemplate("ko_datagrid_search", viewModel, {
        templateEngine: templateEngine
      }, searchContainer, "replaceNode");
      lengthMenuContainer = element.appendChild(document.createElement("DIV"));
      ko.renderTemplate("ko_datagrid_lengthMenu", viewModel, {
        templateEngine: templateEngine
      }, lengthMenuContainer, "replaceNode");
      gridContainer = element.appendChild(document.createElement("DIV"));
      ko.renderTemplate("ko_datagrid_grid", viewModel, {
        templateEngine: templateEngine
      }, gridContainer, "replaceNode");
      pageLinksContainer = element.appendChild(document.createElement("DIV"));
      return ko.renderTemplate("ko_datagrid_pageLinks", viewModel, {
        templateEngine: templateEngine
      }, pageLinksContainer, "replaceNode");
    }
  };

  ko.datagrid = {};

  ko.datagrid.DataGridViewModel = (function() {
    function DataGridViewModel(config) {
      var _ref, _ref1, _ref2;
      this.data = ko.observableArray(ko.unwrap(config.data));
      this.pageLength = ko.observable((_ref = (_ref1 = config.options) != null ? _ref1.pageLength : void 0) != null ? _ref : 10);
      this.columns = ko.unwrap(config.columns);
      _ref2 = config.options, this.sortable = _ref2.sortable, this.searchable = _ref2.searchable, this.lengthMenu = _ref2.lengthMenu, this.paging = _ref2.paging, this.selectable = _ref2.selectable, this.selectStyle = _ref2.selectStyle;
      if (this.selectStyle !== "radio") {
        this.selectStyle = "checkbox";
      }
      this.currentPageIndex = ko.observable(0);
      this.searchInput = ko.observable("");
      this.searchableData = ko.computed((function(_this) {
        return function() {
          var item, key, results, searchString, _i, _len, _ref3;
          if ((_this.searchInput() == null) || _this.searchInput().length === 0) {
            return _this.data();
          } else {
            results = [];
            _ref3 = _this.data();
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              item = _ref3[_i];
              searchString = "";
              for (key in item) {
                if (!__hasProp.call(item, key)) continue;
                searchString += item[key];
              }
              if (searchString.toLowerCase().indexOf(_this.searchInput().toLowerCase()) !== -1) {
                results.push(item);
              }
            }
            return results;
          }
        };
      })(this));
      this.updateColumnSortState = function(column, state) {
        var col, updatedColumns, _i, _len, _ref3;
        updatedColumns = [];
        _ref3 = this.columns;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          col = _ref3[_i];
          if (col.rowText === column) {
            col.sortState = state;
          }
          updatedColumns.push(col);
        }
        return this.columns = updatedColumns;
      };
      this.columnSortState = function(column) {
        var col, _i, _len, _ref3;
        _ref3 = this.columns;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          col = _ref3[_i];
          if (col.rowText === column) {
            return col.sortState;
          }
        }
      };
      this.sortColumn = function(column) {
        if ((this.sortable != null) && this.sortable) {
          if (this.columnSortState(column) === "asc") {
            return this.data(this.data().sort((function(_this) {
              return function(obj1, obj2) {
                _this.updateColumnSortState(column, "dsc");
                if (obj1[column] === obj2[column]) {
                  return 0;
                } else if (obj1[column] < obj2[column]) {
                  return 1;
                } else {
                  return -1;
                }
              };
            })(this)));
          } else {
            return this.data(this.data().sort((function(_this) {
              return function(obj1, obj2) {
                _this.updateColumnSortState(column, "asc");
                if (obj1[column] === obj2[column]) {
                  return 0;
                } else if (obj1[column] < obj2[column]) {
                  return -1;
                } else {
                  return 1;
                }
              };
            })(this)));
          }
        }
      };
      this.itemsOnCurrentPage = ko.computed((function(_this) {
        return function() {
          var startIndex;
          if ((_this.paging != null) && _this.paging) {
            startIndex = _this.pageLength() * _this.currentPageIndex();
            return ko.unwrap(_this.searchableData).slice(startIndex, startIndex + _this.pageLength());
          } else {
            return ko.unwrap(_this.searchableData);
          }
        };
      })(this));
      this.maxPageIndex = ko.computed((function(_this) {
        return function() {
          if ((_this.paging != null) && _this.paging) {
            return Math.ceil(ko.unwrap(_this.searchableData).length / _this.pageLength()) - 1;
          } else {
            return -1;
          }
        };
      })(this));
    }

    return DataGridViewModel;

  })();

}).call(this);
